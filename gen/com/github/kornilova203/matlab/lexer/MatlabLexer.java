/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.kornilova203.matlab.lexer;

import com.intellij.lexer.FlexAdapter;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.kornilova203.matlab.psi.MatlabTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MatlabLexer.flex</tt>
 */
public class MatlabLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WS_MATTERS = 2;
  public static final int LOOK_FOR_CTRANS = 4;
  public static final int SINGLE_QOUTE_STRING_STATE = 6;
  public static final int BLOCKCOMMENT_STATE = 8;
  public static final int LOOK_FOR_LINECOMMENT = 10;
  public static final int LINECOMMENT_STATE = 12;
  public static final int FILE_NAME_STATE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  0,  1,  0,  1,  2,  2,  3,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17520 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\10\1\35\11\10\1\36\21\10\1\37\1\40\24"+
    "\10\1\41\3\10\1\23\1\42\1\41\4\10\1\43\1\44\4\0\1\45\1\46\1\26\3\10\2\47\1"+
    "\26\1\50\1\51\1\0\1\52\5\10\1\53\2\0\1\54\1\55\1\56\13\10\1\57\1\45\1\60\1"+
    "\61\1\54\1\62\1\26\1\63\1\64\3\10\3\0\1\65\12\10\1\66\1\0\1\67\1\26\1\54\1"+
    "\70\3\10\1\53\1\71\1\22\2\10\1\66\1\72\1\73\1\74\2\26\3\10\1\75\1\10\1\47"+
    "\6\26\2\10\1\31\1\76\2\26\1\77\5\0\1\100\6\10\1\101\2\0\1\102\1\10\1\103\1"+
    "\54\1\41\1\10\1\104\1\105\1\106\2\10\1\107\1\110\1\111\1\112\1\113\1\63\1"+
    "\114\1\103\1\54\1\115\1\116\1\117\1\120\1\106\2\10\1\107\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\54\1\130\1\26\1\117\1\36\1\35\2\10\1\107\1\131"+
    "\1\111\1\45\1\132\1\133\1\26\1\103\1\54\1\42\1\134\1\117\1\105\1\106\2\10"+
    "\1\107\1\131\1\111\1\112\1\124\1\135\1\114\1\103\1\54\1\42\1\26\1\136\1\137"+
    "\1\140\1\141\1\116\1\137\1\10\1\142\1\143\1\144\1\145\1\26\1\127\1\54\1\26"+
    "\1\42\1\146\1\31\1\107\2\10\1\107\1\10\1\147\1\150\1\144\1\151\1\47\1\103"+
    "\1\54\2\26\1\104\1\31\1\107\2\10\1\107\1\152\1\111\1\150\1\144\1\151\1\33"+
    "\1\103\1\54\1\153\1\26\1\146\1\31\1\107\4\10\1\154\1\150\1\155\1\156\1\43"+
    "\1\103\1\54\1\26\1\40\1\157\1\10\1\23\1\40\2\10\1\35\1\160\1\23\1\161\1\162"+
    "\1\0\1\127\1\54\1\163\1\26\1\41\5\10\1\164\1\165\1\166\1\167\1\54\1\170\4"+
    "\26\1\171\1\172\1\173\1\41\1\174\1\175\1\164\1\176\1\177\1\50\1\54\1\200\4"+
    "\26\1\133\2\26\1\201\1\54\1\170\1\202\1\203\1\10\1\41\3\10\1\27\1\44\1\0\1"+
    "\150\1\204\1\0\1\44\3\0\1\205\1\206\7\26\5\10\1\53\1\0\1\207\1\54\1\170\1"+
    "\66\1\210\1\211\1\212\1\213\1\10\1\214\1\215\1\54\1\216\4\10\1\36\1\21\5\10"+
    "\1\217\51\10\1\140\1\23\1\140\5\10\1\140\4\10\1\140\1\23\1\140\1\10\1\23\7"+
    "\10\1\140\10\10\1\220\4\26\2\10\2\26\12\10\2\76\1\41\114\10\1\105\2\10\1\41"+
    "\2\10\1\47\11\10\1\137\1\10\1\133\1\10\1\31\1\221\1\26\2\10\1\221\1\26\2\10"+
    "\1\222\1\26\1\10\1\31\1\223\1\26\6\10\1\224\3\0\1\225\1\226\1\54\1\170\3\26"+
    "\1\227\1\54\1\170\13\10\1\26\1\230\4\10\1\231\10\10\1\76\1\26\3\10\1\23\1"+
    "\0\1\2\1\0\1\2\1\127\1\54\3\10\1\76\1\27\1\26\5\10\1\115\3\10\1\25\1\54\1"+
    "\170\4\26\2\10\1\166\1\2\6\10\1\204\1\167\3\0\1\112\1\54\1\170\1\54\1\170"+
    "\1\43\1\26\1\0\1\50\10\26\1\232\5\10\1\224\1\0\1\232\1\115\1\54\1\170\1\26"+
    "\1\233\1\2\1\26\1\234\3\10\1\102\1\212\1\54\1\70\4\10\1\66\1\0\1\2\1\26\4"+
    "\10\1\224\2\0\1\26\1\54\1\235\1\54\1\70\3\10\1\76\1\10\1\133\10\26\1\236\2"+
    "\0\1\237\1\240\1\201\30\10\7\0\1\241\42\10\2\76\4\10\2\76\1\10\1\242\3\10"+
    "\1\76\6\10\1\31\1\177\1\243\1\27\1\244\1\115\1\10\1\27\1\243\1\27\1\26\1\233"+
    "\3\26\1\245\1\26\1\43\1\133\1\26\1\246\1\26\1\150\1\0\1\42\1\43\2\26\1\10"+
    "\1\27\4\10\2\26\1\0\1\205\1\247\1\0\1\250\1\26\1\251\1\40\1\160\1\252\1\30"+
    "\1\253\1\10\1\254\1\255\1\256\2\26\5\10\1\133\116\26\5\10\1\23\5\10\1\23\20"+
    "\10\1\27\1\257\1\260\1\26\4\10\1\36\1\21\7\10\1\43\1\26\1\63\2\10\1\23\1\26"+
    "\10\23\4\0\5\26\1\43\72\26\1\255\3\26\1\41\1\214\1\252\1\27\1\41\11\10\1\23"+
    "\1\261\1\41\12\10\1\217\1\255\4\10\1\23\1\41\12\10\1\23\2\26\3\10\1\47\6\26"+
    "\170\10\1\76\11\26\75\10\1\47\2\26\21\10\1\27\10\26\5\10\1\76\41\10\1\27\2"+
    "\10\1\54\1\262\2\26\5\10\1\166\1\77\1\263\3\10\1\66\12\10\1\201\3\26\1\43"+
    "\1\10\1\40\14\10\1\106\3\10\1\23\1\10\7\26\1\43\1\10\1\264\1\265\2\10\1\53"+
    "\2\26\1\133\6\10\1\115\1\26\1\266\5\10\1\224\1\0\1\50\1\26\1\54\1\170\2\0"+
    "\1\266\1\267\1\54\1\70\2\10\1\66\1\50\2\10\1\166\1\0\1\2\1\26\3\10\1\27\1"+
    "\100\5\10\1\53\1\0\1\250\1\43\1\54\1\170\1\270\1\10\1\54\1\271\5\10\1\102"+
    "\1\167\1\26\1\265\1\272\1\54\1\170\2\10\1\23\1\273\6\10\1\211\1\274\1\231"+
    "\2\26\1\275\1\10\1\53\1\276\1\26\3\277\1\26\2\23\5\10\1\217\1\76\1\26\16\10"+
    "\1\53\1\300\1\54\1\170\64\10\1\115\1\26\2\10\1\23\1\301\5\10\1\115\40\26\55"+
    "\10\1\76\15\10\1\25\4\26\1\23\1\26\1\301\1\302\1\10\1\107\1\23\1\177\1\303"+
    "\15\10\1\25\3\26\1\301\54\10\1\76\2\26\10\10\1\40\6\10\5\26\1\10\1\27\2\0"+
    "\2\26\2\0\1\116\2\26\1\255\3\26\1\42\1\31\20\10\1\304\1\246\1\26\1\54\1\170"+
    "\1\41\2\10\1\120\1\41\2\10\1\47\1\305\12\10\1\23\3\40\1\306\1\307\2\26\1\310"+
    "\1\10\1\152\2\10\1\23\2\10\1\311\1\10\1\76\1\10\1\76\4\26\17\10\1\47\10\26"+
    "\6\10\1\27\20\26\1\312\20\26\3\10\1\27\6\10\1\133\1\26\1\250\3\26\4\10\1\26"+
    "\1\255\3\10\1\47\4\10\1\66\1\313\3\10\1\76\4\10\1\115\1\10\1\252\5\26\23\10"+
    "\1\76\1\54\1\170\4\10\1\115\4\10\1\115\5\10\1\26\6\10\1\115\23\26\46\10\1"+
    "\23\1\26\2\10\1\76\1\26\1\10\23\26\1\76\1\107\4\10\1\36\1\314\2\10\1\76\1"+
    "\26\2\10\1\23\1\26\3\10\1\23\10\26\2\10\1\315\1\26\2\10\1\76\1\26\3\10\1\25"+
    "\10\26\7\10\1\305\10\26\1\316\1\77\1\152\1\41\2\10\1\115\1\123\4\26\3\10\1"+
    "\27\3\10\1\27\4\26\1\10\1\41\2\10\1\317\3\26\6\10\1\76\1\26\2\10\1\76\1\26"+
    "\2\10\1\47\1\26\2\10\1\25\15\26\11\10\1\133\6\26\6\10\1\47\1\26\6\10\1\47"+
    "\41\26\1\234\6\10\1\0\1\167\3\26\1\127\1\54\1\26\1\63\1\234\5\10\1\0\1\320"+
    "\2\26\3\10\1\133\1\54\1\170\1\234\3\10\1\166\1\0\1\321\1\54\2\26\4\10\1\322"+
    "\1\26\1\234\5\10\1\53\1\0\1\323\1\324\1\54\1\325\4\26\2\10\1\35\2\10\1\224"+
    "\1\0\1\206\10\26\1\23\1\253\1\10\1\36\1\10\1\133\5\10\1\166\1\0\1\313\1\54"+
    "\1\170\1\146\1\105\1\106\2\10\1\107\1\131\1\111\1\112\1\124\1\145\1\255\1"+
    "\326\2\205\21\26\6\10\1\204\1\0\1\207\1\47\1\54\1\170\4\26\6\10\2\0\1\327"+
    "\1\26\1\54\1\170\24\26\5\10\1\166\1\50\1\0\1\250\2\26\1\272\4\26\6\10\2\0"+
    "\1\330\1\26\1\54\1\170\4\26\5\10\1\53\1\0\1\26\1\54\1\170\6\26\3\10\1\331"+
    "\1\0\1\2\1\54\1\170\54\26\10\10\1\54\1\170\1\26\1\43\40\26\1\102\1\234\4\10"+
    "\1\53\1\332\1\63\1\26\1\102\1\100\4\10\1\244\1\214\1\0\1\201\4\26\7\10\1\133"+
    "\40\26\1\10\1\107\3\10\1\166\1\167\1\0\1\133\1\26\1\54\1\170\2\26\1\40\3\10"+
    "\1\333\2\0\1\44\1\167\11\26\1\23\1\35\4\10\1\334\1\335\1\215\1\26\1\0\1\201"+
    "\24\26\63\10\1\25\14\26\15\10\1\23\2\26\30\10\1\115\27\26\5\10\1\23\72\26"+
    "\10\10\1\23\67\26\7\10\1\133\3\10\1\23\1\54\1\170\14\26\3\10\1\76\1\205\1"+
    "\26\6\10\1\167\1\26\1\115\1\26\1\54\1\170\1\301\2\10\1\255\2\10\56\26\10\10"+
    "\1\27\1\26\1\102\4\0\1\167\1\26\1\63\1\234\1\10\10\26\1\25\3\26\75\10\1\27"+
    "\2\26\36\10\1\47\41\26\43\10\1\23\12\26\61\10\1\115\40\26\15\10\1\47\1\10"+
    "\1\27\1\10\1\133\1\10\1\336\1\2\127\26\1\337\1\340\2\0\1\341\1\2\3\26\1\342"+
    "\22\26\1\324\67\26\12\10\1\31\10\10\1\31\1\343\1\344\1\10\1\345\1\152\7\10"+
    "\1\36\1\346\2\31\3\10\1\347\1\177\1\40\1\107\51\10\1\76\3\10\1\107\2\10\1"+
    "\217\3\10\1\217\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\107\3\10\1"+
    "\107\2\10\1\217\1\350\6\54\6\0\1\167\1\233\5\0\1\205\1\312\1\26\1\351\2\26"+
    "\1\233\1\44\1\0\52\26\1\167\2\0\1\352\1\353\1\313\72\26\30\10\1\27\1\26\1"+
    "\167\5\26\10\10\1\224\1\313\1\54\1\170\24\26\1\152\3\10\1\171\1\41\1\217\1"+
    "\354\1\251\1\355\1\171\1\242\1\171\2\217\1\126\1\10\1\35\1\10\1\115\1\356"+
    "\1\35\1\10\1\115\50\26\32\10\1\23\5\26\106\10\1\27\1\26\33\10\1\76\120\10"+
    "\1\25\1\26\146\10\1\133\3\26\3\10\1\76\74\26\1\125\3\26\14\0\20\26\36\0\2"+
    "\26");

  /* The ZZ_CMAP_A table has 1912 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\22\1\4\1\2\2\6\1\3\6\22\4\0\1\5\1\0\1\25\1\0\1\21\1\10\1\61\1\7\1\51\1"+
    "\52\1\57\1\20\1\65\1\55\1\15\1\56\12\23\1\66\1\67\1\53\1\54\1\64\1\73\1\72"+
    "\22\21\1\70\1\24\1\71\1\60\1\21\1\0\1\44\1\26\1\32\1\37\1\17\1\27\1\47\1\42"+
    "\1\16\1\21\1\50\1\35\1\45\1\31\1\34\1\43\1\21\1\40\1\36\1\33\1\30\1\21\1\41"+
    "\1\21\1\46\1\21\1\12\1\62\1\13\1\63\6\22\1\11\2\22\2\0\4\21\4\0\1\21\2\0\1"+
    "\22\7\0\1\21\4\0\1\21\5\0\7\21\1\0\2\21\4\0\4\21\16\0\5\21\7\0\1\21\1\0\1"+
    "\21\1\0\5\21\1\0\2\21\2\0\4\21\1\0\1\21\6\0\1\21\1\0\3\21\1\0\1\21\1\0\4\21"+
    "\1\0\13\21\1\0\3\21\1\0\5\22\2\0\6\21\1\0\7\21\1\0\1\21\15\0\1\21\1\0\15\22"+
    "\1\0\1\22\1\0\2\22\1\0\2\22\1\0\1\22\3\21\5\0\6\22\5\0\1\21\4\0\3\22\1\0\1"+
    "\22\3\0\3\21\5\22\12\14\4\0\2\21\1\22\13\21\1\0\1\21\7\22\2\21\2\22\1\0\4"+
    "\22\2\21\2\14\3\21\2\0\1\21\7\0\1\22\1\21\1\22\6\21\3\22\2\0\11\21\3\22\1"+
    "\21\6\0\2\14\6\21\4\22\2\21\2\0\2\22\1\21\11\22\1\21\3\22\1\21\5\22\2\0\1"+
    "\21\3\22\4\0\6\21\6\0\10\22\6\21\3\22\1\21\2\22\1\21\7\22\2\21\2\22\2\0\2"+
    "\14\1\21\3\22\1\0\10\21\2\0\2\21\2\0\6\21\1\0\7\21\1\0\1\21\3\0\4\21\2\0\1"+
    "\22\1\21\7\22\2\0\2\22\2\0\3\22\1\21\5\0\2\21\1\0\5\21\7\0\2\21\4\0\3\22\1"+
    "\0\6\21\4\0\2\21\1\0\2\21\1\0\2\21\1\0\2\21\2\0\1\22\1\0\5\22\4\0\2\22\2\0"+
    "\3\22\3\0\1\22\7\0\4\21\1\0\1\21\7\0\2\14\2\22\3\21\1\22\2\0\1\21\1\0\2\21"+
    "\1\0\3\21\2\22\1\0\3\22\2\0\1\21\10\0\1\21\6\22\6\0\2\22\2\0\1\22\1\21\1\0"+
    "\6\21\3\0\3\21\1\0\4\21\3\0\2\21\1\0\1\21\1\0\4\21\4\0\5\22\3\0\3\22\1\0\4"+
    "\22\2\0\1\21\6\0\5\22\1\0\5\21\3\0\1\21\7\22\1\0\2\22\5\0\2\22\1\0\4\21\1"+
    "\0\3\21\1\0\2\21\5\0\3\21\2\22\1\21\3\22\1\0\4\22\1\21\5\0\3\21\1\22\2\0\2"+
    "\22\1\0\7\21\1\0\1\21\4\0\1\22\4\0\6\22\1\0\1\22\3\0\2\22\4\0\1\21\1\22\2"+
    "\21\7\22\4\0\10\21\10\22\1\0\2\14\7\0\2\21\1\0\1\21\2\0\2\21\1\0\1\21\2\0"+
    "\1\21\6\0\4\21\1\0\3\21\1\0\1\21\1\0\1\21\2\0\2\21\1\0\3\21\2\22\1\0\2\22"+
    "\1\21\2\0\5\21\1\0\1\21\1\0\2\14\2\0\4\21\2\22\13\0\1\22\1\0\1\22\1\0\1\22"+
    "\4\0\2\22\5\21\10\22\11\0\1\22\1\0\7\22\1\21\2\22\4\21\3\22\1\21\3\22\2\21"+
    "\7\22\3\21\4\22\5\21\14\22\1\21\1\22\2\14\4\22\2\0\3\21\1\0\7\21\2\0\3\22"+
    "\2\21\3\22\3\0\2\21\2\22\4\0\1\21\1\0\2\22\4\0\4\21\10\22\3\0\1\21\3\0\2\21"+
    "\1\22\5\0\4\22\1\0\5\21\2\22\2\21\1\22\1\21\5\0\5\22\3\21\3\0\10\22\5\21\2"+
    "\14\3\0\3\21\3\22\1\0\5\22\4\21\1\22\4\21\3\22\2\21\3\22\1\0\5\22\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\2\0\3\21\1\0\6\21\2\0\2\21\2\1\5\22\5\0\1\21\4"+
    "\0\1\22\3\0\4\22\11\0\1\21\4\0\1\21\1\0\5\21\2\0\1\21\1\0\4\21\1\0\3\21\2"+
    "\0\4\21\5\0\5\21\4\0\1\21\4\0\4\21\3\22\2\21\5\0\2\22\2\0\3\21\2\14\2\21\4"+
    "\0\6\22\1\0\3\21\1\22\3\21\1\22\4\21\1\22\4\21\2\22\6\21\3\0\1\21\1\0\1\21"+
    "\2\0\5\21\1\22\2\21\2\14\5\21\1\0\4\21\2\22\4\0\1\21\3\22\2\21\1\22\5\21\2"+
    "\22\3\0\3\21\4\0\3\21\2\22\2\0\6\21\1\0\3\22\1\0\2\22\5\0\5\21\5\0\1\21\1"+
    "\22\3\21\1\0\2\21\1\0\7\21\2\0\1\22\6\0\2\21\2\0\3\21\3\0\2\21\3\0\2\21\2"+
    "\0\3\22\4\0\3\21\1\0\2\21\1\0\1\21\5\0\1\22\2\0\3\22\5\0\1\21\3\0\1\21\2\0"+
    "\4\21\1\0\2\21\2\0\1\21\3\22\1\0\2\22\1\0\5\21\2\22\1\0\3\22\2\0\1\22\2\0"+
    "\5\22\1\0\2\14\3\21\1\22\2\0\1\21\1\0\1\22\4\21\5\0\3\22\3\0\2\14\1\21\1\0"+
    "\1\21\3\0\2\21\2\22\2\0\6\22\2\21\1\0\1\21\1\22\3\0\1\21\3\0\2\21\3\0\5\22"+
    "\1\21\4\22\3\0\6\22\1\21\6\22\3\0\1\22\1\0\2\22\1\0\1\22\2\21\3\0\2\22\6\0"+
    "\5\22\3\0\6\22\2\0\3\22\2\0\4\22\4\0\1\21\2\0\2\21\2\0\4\21\1\0\4\21\1\0\1"+
    "\21\1\0\6\21\2\0\5\21\1\0\4\21\1\0\4\21\2\0\2\14\4\0\1\22\3\0\1\22\2\0\7\22"+
    "\1\0\2\22\1\0\2\22\1\0\1\21\1\0\1\21\5\0\1\21\1\0\1\21\1\0\3\21\1\0\3\21\1"+
    "\0\3\21");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\2\11\1\12\1\11\1\13\1\14\1\15"+
    "\14\11\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\3\1\5\1\41\1\42"+
    "\4\41\1\43\2\44\2\41\1\1\1\45\1\46\1\0"+
    "\1\47\1\0\1\50\1\0\1\51\1\52\1\53\1\54"+
    "\1\55\2\11\1\56\1\13\1\0\1\15\22\11\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\0\1\5"+
    "\1\66\1\41\4\0\1\67\1\70\1\47\1\71\1\0"+
    "\1\72\1\73\3\11\1\74\2\11\1\0\2\11\1\75"+
    "\2\11\1\0\7\11\1\0\3\76\1\77\3\100\3\101"+
    "\1\71\1\102\1\0\1\103\4\11\1\104\1\11\1\105"+
    "\2\11\1\106\1\11\1\107\1\0\4\11\1\110\1\111"+
    "\1\112\1\11\1\113\3\11\1\114\1\11\1\0\1\11"+
    "\1\115\1\11\1\116\2\11\1\117\4\11\1\120\1\121"+
    "\1\122\1\123\1\124\4\11\1\125\1\126\1\127\1\11"+
    "\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u01e0\0\u01e0"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u01e0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u01e0\0\u01e0\0\u07f8"+
    "\0\u0834\0\u0870\0\u01e0\0\u01e0\0\u01e0\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u01e0\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0b40\0\u0bf4\0\u0bf4\0\u01e0\0\u01e0"+
    "\0\u0348\0\u0c30\0\u0c6c\0\u01e0\0\u0ca8\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u0474\0\u0ce4\0\u0d20\0\u01e0\0\u01e0\0\u0d5c\0\u01e0"+
    "\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u11d0\0\u120c\0\u01e0\0\u1248\0\u0ac8\0\u0b04\0\u1284"+
    "\0\u12c0\0\u01e0\0\u01e0\0\u01e0\0\u12fc\0\u1338\0\u1374\0\u0474"+
    "\0\u13b0\0\u13ec\0\u1428\0\u0474\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u0474\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u01e0\0\u1824\0\u17e8"+
    "\0\u01e0\0\u01e0\0\u1860\0\u1284\0\u01e0\0\u189c\0\u12c0\0\u01e0"+
    "\0\u01e0\0\u1374\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u01e0"+
    "\0\u1a04\0\u0474\0\u1a40\0\u1a7c\0\u01e0\0\u1ab8\0\u0474\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u01e0\0\u01e0\0\u01e0\0\u1c20"+
    "\0\u0474\0\u1c5c\0\u1c98\0\u1cd4\0\u0474\0\u1d10\0\u1d4c\0\u1d88"+
    "\0\u01e0\0\u1dc4\0\u0474\0\u1e00\0\u1e3c\0\u0474\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u01e0\0\u0474\0\u0474\0\u0474\0\u0474\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u0474\0\u0474\0\u0474\0\u2058\0\u0474";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\13\3\14\1\15\1\16\1\12\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\11"+
    "\1\27\1\30\1\31\1\32\1\33\2\26\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\26\1\44"+
    "\3\26\1\45\1\26\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\11\2\12"+
    "\1\13\3\71\1\15\1\72\1\12\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\11\1\27\1\30"+
    "\1\31\1\32\1\33\2\26\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\26\1\44\3\26\1\45"+
    "\1\26\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\73\3\11\2\73\1\11"+
    "\1\74\1\73\1\11\12\73\1\75\47\73\100\76\3\77"+
    "\1\76\1\100\63\76\1\101\3\11\2\102\1\103\2\101"+
    "\1\11\62\101\1\104\3\11\2\104\1\11\2\104\1\11"+
    "\62\104\1\105\3\106\2\105\1\106\2\105\1\106\37\105"+
    "\1\107\22\105\100\0\1\12\71\0\1\12\1\0\1\12"+
    "\73\0\3\14\67\0\1\110\71\0\1\16\3\0\2\16"+
    "\1\0\2\16\1\0\62\16\14\0\1\111\1\112\1\0"+
    "\1\113\3\0\1\111\57\0\1\114\4\0\1\112\1\115"+
    "\5\0\1\112\1\116\31\0\1\117\1\120\1\121\24\0"+
    "\1\26\2\0\1\26\1\0\2\26\1\0\3\26\2\0"+
    "\1\26\1\122\21\26\34\0\1\26\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\0\3\26\1\123\3\26\1\124"+
    "\13\26\43\0\1\125\64\0\1\26\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\0\23\26\37\0\1\111\1\112"+
    "\1\126\1\113\3\0\1\27\50\0\2\31\2\0\20\31"+
    "\1\127\1\130\46\31\11\0\1\26\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\0\12\26\1\131\10\26\34\0"+
    "\1\26\2\0\1\26\1\0\2\26\1\0\3\26\2\0"+
    "\2\26\1\132\3\26\1\133\14\26\34\0\1\26\2\0"+
    "\1\26\1\0\2\26\1\0\3\26\2\0\6\26\1\134"+
    "\1\135\1\26\1\136\4\26\1\137\4\26\34\0\1\26"+
    "\2\0\1\26\1\0\2\26\1\0\3\26\2\0\12\26"+
    "\1\140\10\26\34\0\1\26\2\0\1\26\1\0\2\26"+
    "\1\0\3\26\2\0\5\26\1\141\15\26\34\0\1\26"+
    "\2\0\1\26\1\0\2\26\1\0\3\26\2\0\6\26"+
    "\1\142\1\26\1\143\12\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\13\26\1\144\1\26"+
    "\1\145\5\26\34\0\1\26\2\0\1\26\1\0\1\146"+
    "\1\26\1\0\3\26\2\0\23\26\34\0\1\26\2\0"+
    "\1\26\1\0\1\26\1\147\1\0\3\26\2\0\23\26"+
    "\34\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\14\26\1\150\6\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\16\26\1\151\4\26"+
    "\34\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\7\26\1\152\13\26\77\0\1\153\73\0\1\154"+
    "\74\0\1\155\77\0\1\156\74\0\1\157\65\0\1\160"+
    "\73\0\1\161\23\0\3\71\1\0\1\162\63\0\1\16"+
    "\3\0\2\16\1\0\2\16\1\0\1\163\61\16\2\0"+
    "\1\164\73\0\1\164\4\0\1\165\66\0\1\164\21\0"+
    "\1\165\1\0\2\165\1\0\1\165\1\0\1\165\4\0"+
    "\1\165\37\0\3\166\1\0\1\167\75\0\1\170\1\171"+
    "\62\0\1\172\73\0\1\172\1\0\3\103\71\0\3\103"+
    "\67\0\1\173\2\0\1\173\102\0\1\112\1\0\1\174"+
    "\1\113\3\0\1\112\64\0\1\175\3\0\1\176\2\0"+
    "\1\175\31\0\1\176\33\0\1\177\67\0\1\26\2\0"+
    "\1\26\1\0\2\26\1\0\3\26\2\0\11\26\1\200"+
    "\11\26\34\0\1\26\2\0\1\26\1\0\2\26\1\0"+
    "\3\26\2\0\10\26\1\201\12\26\23\0\2\31\2\0"+
    "\70\31\11\0\1\26\2\0\1\26\1\0\1\26\1\202"+
    "\1\0\3\26\2\0\23\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\3\26\1\203\17\26"+
    "\34\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\12\26\1\204\10\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\3\26\1\205\17\26"+
    "\34\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\16\26\1\206\4\26\30\0\1\207\3\0\1\26"+
    "\2\0\1\26\1\0\2\26\1\0\3\26\2\0\23\26"+
    "\34\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\5\26\1\210\2\26\1\211\12\26\34\0\1\26"+
    "\2\0\1\26\1\0\2\26\1\0\3\26\2\0\20\26"+
    "\1\212\2\26\34\0\1\26\2\0\1\26\1\0\2\26"+
    "\1\0\3\26\2\0\14\26\1\213\6\26\34\0\1\26"+
    "\2\0\1\26\1\0\2\26\1\0\3\26\2\0\16\26"+
    "\1\214\4\26\30\0\1\215\3\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\23\26\34\0\1\26"+
    "\2\0\1\26\1\0\1\216\1\26\1\0\3\26\2\0"+
    "\23\26\34\0\1\26\2\0\1\26\1\0\2\26\1\0"+
    "\3\26\2\0\17\26\1\217\3\26\34\0\1\26\2\0"+
    "\1\26\1\0\2\26\1\0\3\26\2\0\12\26\1\220"+
    "\10\26\34\0\1\26\2\0\1\26\1\0\2\26\1\0"+
    "\3\26\2\0\5\26\1\221\15\26\34\0\1\26\2\0"+
    "\1\26\1\0\1\222\1\26\1\0\3\26\2\0\23\26"+
    "\34\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\12\26\1\223\10\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\6\26\1\224\14\26"+
    "\35\0\1\225\61\0\1\16\2\226\1\227\2\163\1\230"+
    "\2\16\1\226\62\16\2\0\1\231\72\0\2\232\1\233"+
    "\2\170\1\234\2\0\1\232\63\0\2\235\1\236\2\171"+
    "\1\237\2\0\1\235\76\0\1\175\1\0\1\240\4\0"+
    "\1\175\64\0\1\175\6\0\1\175\52\0\1\241\1\0"+
    "\3\242\76\0\1\26\2\0\1\26\1\0\1\26\1\243"+
    "\1\0\3\26\2\0\23\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\16\26\1\244\4\26"+
    "\34\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\4\26\1\245\16\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\5\26\1\246\15\26"+
    "\34\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\10\26\1\247\12\26\23\0\5\250\1\207\43\250"+
    "\1\0\22\250\11\0\1\26\2\0\1\26\1\0\2\26"+
    "\1\0\3\26\2\0\4\26\1\251\16\26\34\0\1\26"+
    "\2\0\1\26\1\0\1\26\1\252\1\0\3\26\2\0"+
    "\23\26\34\0\1\26\2\0\1\26\1\0\1\26\1\253"+
    "\1\0\3\26\2\0\23\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\11\26\1\254\11\26"+
    "\23\0\5\255\1\215\43\255\1\0\22\255\11\0\1\26"+
    "\2\0\1\26\1\0\2\26\1\0\3\26\2\0\5\26"+
    "\1\256\15\26\34\0\1\26\2\0\1\26\1\0\2\26"+
    "\1\0\3\26\2\0\11\26\1\257\11\26\30\0\1\260"+
    "\3\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\23\26\34\0\1\26\2\0\1\26\1\0\2\26"+
    "\1\0\3\26\2\0\2\26\1\261\20\26\34\0\1\26"+
    "\2\0\1\26\1\0\2\26\1\0\3\26\2\0\7\26"+
    "\1\262\13\26\34\0\1\26\2\0\1\26\1\0\2\26"+
    "\1\0\3\26\2\0\1\26\1\263\21\26\34\0\1\26"+
    "\2\0\1\26\1\0\2\26\1\0\3\26\2\0\1\264"+
    "\22\26\24\0\2\226\1\227\2\225\1\230\2\0\1\226"+
    "\64\0\1\265\73\0\1\266\73\0\1\267\102\0\1\26"+
    "\2\0\1\26\1\0\1\270\1\26\1\0\3\26\2\0"+
    "\23\26\34\0\1\26\2\0\1\26\1\0\2\26\1\0"+
    "\3\26\2\0\22\26\1\271\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\5\26\1\272\15\26"+
    "\34\0\1\26\2\0\1\26\1\0\1\273\1\26\1\0"+
    "\3\26\2\0\23\26\34\0\1\26\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\0\10\26\1\274\12\26\34\0"+
    "\1\26\2\0\1\26\1\0\2\26\1\0\3\26\2\0"+
    "\14\26\1\275\6\26\34\0\1\26\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\0\12\26\1\276\10\26\30\0"+
    "\1\277\3\0\1\26\2\0\1\26\1\0\2\26\1\0"+
    "\3\26\2\0\23\26\34\0\1\26\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\0\4\26\1\300\16\26\23\0"+
    "\5\301\1\260\43\301\1\0\22\301\11\0\1\26\2\0"+
    "\1\26\1\0\2\26\1\0\3\26\2\0\12\26\1\302"+
    "\10\26\34\0\1\26\2\0\1\26\1\0\1\26\1\303"+
    "\1\0\3\26\2\0\23\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\6\26\1\304\14\26"+
    "\34\0\1\26\2\0\1\26\1\0\2\26\1\0\3\26"+
    "\2\0\16\26\1\305\4\26\34\0\1\26\2\0\1\26"+
    "\1\0\2\26\1\0\3\26\2\0\1\26\1\306\21\26"+
    "\34\0\1\26\2\0\1\26\1\0\1\307\1\26\1\0"+
    "\3\26\2\0\23\26\34\0\1\26\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\0\3\26\1\310\17\26\34\0"+
    "\1\26\2\0\1\26\1\0\2\26\1\0\3\26\2\0"+
    "\11\26\1\311\11\26\34\0\1\26\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\0\13\26\1\312\7\26\23\0"+
    "\5\313\1\277\43\313\1\0\22\313\11\0\1\26\2\0"+
    "\1\26\1\0\2\26\1\0\3\26\2\0\14\26\1\314"+
    "\6\26\34\0\1\26\2\0\1\26\1\0\2\26\1\0"+
    "\3\26\2\0\3\26\1\315\17\26\34\0\1\26\2\0"+
    "\1\26\1\0\2\26\1\0\3\26\2\0\12\26\1\316"+
    "\10\26\34\0\1\26\2\0\1\26\1\0\2\26\1\0"+
    "\3\26\2\0\7\26\1\317\13\26\34\0\1\26\2\0"+
    "\1\26\1\0\2\26\1\0\3\26\2\0\6\26\1\320"+
    "\14\26\34\0\1\26\2\0\1\26\1\0\2\26\1\0"+
    "\3\26\2\0\2\26\1\321\20\26\34\0\1\26\2\0"+
    "\1\26\1\0\1\26\1\322\1\0\3\26\2\0\23\26"+
    "\34\0\1\26\2\0\1\26\1\0\1\323\1\26\1\0"+
    "\3\26\2\0\23\26\34\0\1\26\2\0\1\26\1\0"+
    "\2\26\1\0\3\26\2\0\3\26\1\324\17\26\34\0"+
    "\1\26\2\0\1\26\1\0\1\26\1\325\1\0\3\26"+
    "\2\0\23\26\34\0\1\26\2\0\1\26\1\0\2\26"+
    "\1\0\3\26\2\0\1\26\1\326\21\26\34\0\1\26"+
    "\2\0\1\26\1\0\2\26\1\0\3\26\2\0\10\26"+
    "\1\327\12\26\34\0\1\26\2\0\1\26\1\0\1\26"+
    "\1\330\1\0\3\26\2\0\23\26\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\5\1\2\11\7\1\1\11\15\1\2\11"+
    "\3\1\3\11\4\1\7\11\5\1\1\11\10\1\2\11"+
    "\1\0\1\1\1\0\1\11\1\0\4\11\3\1\2\11"+
    "\1\0\1\11\22\1\7\11\1\0\1\1\1\11\1\1"+
    "\4\0\3\11\1\1\1\0\10\1\1\0\5\1\1\0"+
    "\7\1\1\0\1\11\2\1\2\11\2\1\1\11\2\1"+
    "\2\11\1\0\5\1\1\11\4\1\1\11\2\1\1\0"+
    "\4\1\3\11\7\1\1\0\1\1\1\11\11\1\1\11"+
    "\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<>();

    public static FlexAdapter getAdapter() {
        return new FlexAdapter(new MatlabLexer());
    }

    private MatlabLexer() {
        this(null);
    }

    private void yypushState(int newState) {
      stack.push(yystate());
      yybegin(newState);
    }

    private void yypopState() {
        if (stack.isEmpty()) return;
        yybegin(stack.pop());
    }

    private void yyclearStack() {
        while (!stack.isEmpty()) stack.pop();
    }

    private void stopLookForCtrans() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
    }

    private void lookForCtrans() {
        if (yystate() != LOOK_FOR_CTRANS) yypushState(LOOK_FOR_CTRANS);
    }

    private void startWsDoesNotMatter() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        yypushState(YYINITIAL);
    }

    private void stopWsDoesNotMatter() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        if (yystate() == YYINITIAL) yypopState();
    }

    private void startWsMatters() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        yypushState(WS_MATTERS);
    }

    private void stopWsMatters() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        if (yystate() == WS_MATTERS) yypopState();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MatlabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case YYINITIAL: {
              return null;
            }  // fall though
            case 217: break;
            case WS_MATTERS: {
              return null;
            }  // fall though
            case 218: break;
            case LOOK_FOR_CTRANS: {
              return null;
            }  // fall though
            case 219: break;
            case SINGLE_QOUTE_STRING_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return SINGLE_QUOTE_STRING;
            }  // fall though
            case 220: break;
            case BLOCKCOMMENT_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return COMMENT;
            }  // fall though
            case 221: break;
            case LOOK_FOR_LINECOMMENT: {
              yyclearStack(); yybegin(YYINITIAL); return COMMENT;
            }  // fall though
            case 222: break;
            case LINECOMMENT_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return COMMENT;
            }  // fall though
            case 223: break;
            case FILE_NAME_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return FILE_NAME;
            }  // fall though
            case 224: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 89: break;
          case 2: 
            { stopLookForCtrans(); return NEWLINE;
            } 
            // fall through
          case 90: break;
          case 3: 
            { if (yystate() == LOOK_FOR_CTRANS &&
                                    !stack.isEmpty() &&
                                    stack.peek() == WS_MATTERS) {
                                yypopState();
                           }
                            return WHITE_SPACE;
            } 
            // fall through
          case 91: break;
          case 4: 
            { if (yystate() == LOOK_FOR_CTRANS) {
                                return CTRANS;
                            } else {
                                yypushState(SINGLE_QOUTE_STRING_STATE);
                            }
            } 
            // fall through
          case 92: break;
          case 5: 
            { stopLookForCtrans(); return COMMENT;
            } 
            // fall through
          case 93: break;
          case 6: 
            { startWsMatters(); return LBRACE;
            } 
            // fall through
          case 94: break;
          case 7: 
            { stopWsMatters(); lookForCtrans(); return RBRACE;
            } 
            // fall through
          case 95: break;
          case 8: 
            { stopLookForCtrans(); return DOT;
            } 
            // fall through
          case 96: break;
          case 9: 
            { lookForCtrans(); return IDENTIFIER;
            } 
            // fall through
          case 97: break;
          case 10: 
            { stopLookForCtrans(); return PLUS;
            } 
            // fall through
          case 98: break;
          case 11: 
            { lookForCtrans(); return INTEGER;
            } 
            // fall through
          case 99: break;
          case 12: 
            { stopLookForCtrans(); return LDIV;
            } 
            // fall through
          case 100: break;
          case 13: 
            { lookForCtrans(); return DOUBLE_QUOTE_STRING;
            } 
            // fall through
          case 101: break;
          case 14: 
            { startWsDoesNotMatter(); return LPARENTH;
            } 
            // fall through
          case 102: break;
          case 15: 
            { stopWsDoesNotMatter(); lookForCtrans(); return RPARENTH;
            } 
            // fall through
          case 103: break;
          case 16: 
            { stopLookForCtrans(); return LESS;
            } 
            // fall through
          case 104: break;
          case 17: 
            { stopLookForCtrans(); return ASSIGN;
            } 
            // fall through
          case 105: break;
          case 18: 
            { stopLookForCtrans(); return MINUS;
            } 
            // fall through
          case 106: break;
          case 19: 
            { stopLookForCtrans(); return RDIV;
            } 
            // fall through
          case 107: break;
          case 20: 
            { stopLookForCtrans(); return MUL;
            } 
            // fall through
          case 108: break;
          case 21: 
            { stopLookForCtrans(); return POW;
            } 
            // fall through
          case 109: break;
          case 22: 
            { stopLookForCtrans(); return MATRIX_AND;
            } 
            // fall through
          case 110: break;
          case 23: 
            { stopLookForCtrans(); return MATRIX_OR;
            } 
            // fall through
          case 111: break;
          case 24: 
            { stopLookForCtrans(); return TILDA;
            } 
            // fall through
          case 112: break;
          case 25: 
            { stopLookForCtrans(); return MORE;
            } 
            // fall through
          case 113: break;
          case 26: 
            { stopLookForCtrans(); return COMMA;
            } 
            // fall through
          case 114: break;
          case 27: 
            { stopLookForCtrans(); return COLON;
            } 
            // fall through
          case 115: break;
          case 28: 
            { stopLookForCtrans(); return SEMICOLON;
            } 
            // fall through
          case 116: break;
          case 29: 
            { startWsMatters(); return LBRACKET;
            } 
            // fall through
          case 117: break;
          case 30: 
            { stopWsMatters(); lookForCtrans(); return RBRACKET;
            } 
            // fall through
          case 118: break;
          case 31: 
            { stopLookForCtrans(); return AT;
            } 
            // fall through
          case 119: break;
          case 32: 
            { stopLookForCtrans(); return QUESTION_MARK;
            } 
            // fall through
          case 120: break;
          case 33: 
            { 
            } 
            // fall through
          case 121: break;
          case 34: 
            { yypopState(); lookForCtrans(); return SINGLE_QUOTE_STRING;
            } 
            // fall through
          case 122: break;
          case 35: 
            { yypopState(); yypushState(LINECOMMENT_STATE);
            } 
            // fall through
          case 123: break;
          case 36: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 124: break;
          case 37: 
            { yypopState();
            } 
            // fall through
          case 125: break;
          case 38: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (yystate() == LOOK_FOR_CTRANS) {
                              return TRANS;
                          } else {
                              return SINGLE_QUOTE_STRING;
                          }
            } 
            // fall through
          case 126: break;
          case 39: 
            { lookForCtrans(); return FLOAT;
            } 
            // fall through
          case 127: break;
          case 40: 
            { stopLookForCtrans(); return TRANS;
            } 
            // fall through
          case 128: break;
          case 41: 
            { stopLookForCtrans(); return DOT_LDIV;
            } 
            // fall through
          case 129: break;
          case 42: 
            { stopLookForCtrans(); return DOT_RDIV;
            } 
            // fall through
          case 130: break;
          case 43: 
            { stopLookForCtrans(); return DOT_MUL;
            } 
            // fall through
          case 131: break;
          case 44: 
            { stopLookForCtrans(); return DOT_POW;
            } 
            // fall through
          case 132: break;
          case 45: 
            { stopLookForCtrans(); return IF;
            } 
            // fall through
          case 133: break;
          case 46: 
            { stopLookForCtrans(); return PLUSPLUS;
            } 
            // fall through
          case 134: break;
          case 47: 
            { stopLookForCtrans(); return LESS_OR_EQUAL;
            } 
            // fall through
          case 135: break;
          case 48: 
            { stopLookForCtrans(); return EQUAL;
            } 
            // fall through
          case 136: break;
          case 49: 
            { stopLookForCtrans(); return MINUSMINUS;
            } 
            // fall through
          case 137: break;
          case 50: 
            { stopLookForCtrans(); return AND;
            } 
            // fall through
          case 138: break;
          case 51: 
            { stopLookForCtrans(); return OR;
            } 
            // fall through
          case 139: break;
          case 52: 
            { stopLookForCtrans(); return NOT_EQUAL;
            } 
            // fall through
          case 140: break;
          case 53: 
            { stopLookForCtrans(); return MORE_OR_EQUAL;
            } 
            // fall through
          case 141: break;
          case 54: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yypopState(); return SINGLE_QUOTE_STRING;
            } 
            // fall through
          case 142: break;
          case 55: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yypopState(); return COMMENT;
            } 
            // fall through
          case 143: break;
          case 56: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yypopState(); return FILE_NAME;
            } 
            // fall through
          case 144: break;
          case 57: 
            { lookForCtrans(); return FLOAT_EXPONENTIAL;
            } 
            // fall through
          case 145: break;
          case 58: 
            { stopLookForCtrans(); yypushState(LOOK_FOR_LINECOMMENT); return ELLIPSIS;
            } 
            // fall through
          case 146: break;
          case 59: 
            { stopLookForCtrans(); return END;
            } 
            // fall through
          case 147: break;
          case 60: 
            { stopLookForCtrans(); return FOR;
            } 
            // fall through
          case 148: break;
          case 61: 
            { stopLookForCtrans(); return TRY;
            } 
            // fall through
          case 149: break;
          case 62: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { stopLookForCtrans(); yypushState(BLOCKCOMMENT_STATE);
            } 
            // fall through
          case 150: break;
          case 63: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yypopState(); return SINGLE_QUOTE_STRING;
            } 
            // fall through
          case 151: break;
          case 64: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yypushState(BLOCKCOMMENT_STATE);
            } 
            // fall through
          case 152: break;
          case 65: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yypopState();
                               if (yystate() != BLOCKCOMMENT_STATE) return COMMENT;
            } 
            // fall through
          case 153: break;
          case 66: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { stopLookForCtrans(); return ELLIPSIS;
            } 
            // fall through
          case 154: break;
          case 67: 
            { stopLookForCtrans(); return ELSE;
            } 
            // fall through
          case 155: break;
          case 68: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return CD;
            } 
            // fall through
          case 156: break;
          case 69: 
            { stopLookForCtrans(); return CASE;
            } 
            // fall through
          case 157: break;
          case 70: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return LS;
            } 
            // fall through
          case 158: break;
          case 71: 
            { stopLookForCtrans(); return SPMD;
            } 
            // fall through
          case 159: break;
          case 72: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { stopLookForCtrans(); yypushState(BLOCKCOMMENT_STATE);
            } 
            // fall through
          case 160: break;
          case 73: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yypushState(BLOCKCOMMENT_STATE);
            } 
            // fall through
          case 161: break;
          case 74: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { yypopState();
                               if (yystate() != BLOCKCOMMENT_STATE) return COMMENT;
            } 
            // fall through
          case 162: break;
          case 75: 
            { stopLookForCtrans(); return BREAK;
            } 
            // fall through
          case 163: break;
          case 76: 
            { stopLookForCtrans(); return CATCH;
            } 
            // fall through
          case 164: break;
          case 77: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return DIR;
            } 
            // fall through
          case 165: break;
          case 78: 
            { stopLookForCtrans(); return WHILE;
            } 
            // fall through
          case 166: break;
          case 79: 
            { stopLookForCtrans(); return ELSEIF;
            } 
            // fall through
          case 167: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return LOAD;
            } 
            // fall through
          case 168: break;
          case 81: 
            { stopLookForCtrans(); return SWITCH;
            } 
            // fall through
          case 169: break;
          case 82: 
            { stopLookForCtrans(); return RETURN;
            } 
            // fall through
          case 170: break;
          case 83: 
            { stopLookForCtrans(); return PARFOR;
            } 
            // fall through
          case 171: break;
          case 84: 
            { stopLookForCtrans(); return GLOBAL;
            } 
            // fall through
          case 172: break;
          case 85: 
            { stopLookForCtrans(); return FUNCTION;
            } 
            // fall through
          case 173: break;
          case 86: 
            { stopLookForCtrans(); return CONTINUE;
            } 
            // fall through
          case 174: break;
          case 87: 
            { stopLookForCtrans(); return CLASSDEF;
            } 
            // fall through
          case 175: break;
          case 88: 
            { stopLookForCtrans(); return OTHERWISE;
            } 
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
