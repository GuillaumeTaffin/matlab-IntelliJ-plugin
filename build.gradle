plugins {
    id "org.jetbrains.intellij" version "0.3.4"
    id "org.jetbrains.kotlin.jvm" version "1.2.51"
    id "java"
    id "idea"
    id "org.jetbrains.grammarkit" version "2018.1.7"
}

group = "com.gitgub.kornilova_l"
version = "0.2"

repositories {
    mavenCentral()
}

configurations {
    intellij.updateSinceUntilBuild = false
    intellij.downloadSources = true
    intellij.pluginName = "Matlab Support"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

sourceSets.main.java.srcDir file("src/main/gen")

idea {
    module {
        generatedSourceDirs += file("src/main/gen")
    }
}

import org.jetbrains.grammarkit.tasks.*

task generateMatlabLexer(type: GenerateLexer) {
    source = "src/main/grammar/MatlabLexer.flex"
    targetDir = "src/main/gen/com/github/kornilova_l/matlab/lexer"
    targetClass = "MatlabLexer"

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}

task generateSingleQuoteStringLiteralLexer(type: GenerateLexer) {
    source = "src/main/grammar/SingleQuoteStringLiteralLexer.flex"
    targetDir = "src/main/gen/com/github/kornilova_l/matlab/lexer"
    targetClass = "SingleQuoteStringLiteralLexer"

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}

task generateMatlabParser(type: GenerateParser) {
    source = "src/main/grammar/Matlab.bnf"
    targetRoot = "src/main/gen/"
    pathToParser = "/com/github/kornilova_l/matlab/MatlabParser.java"
    pathToPsiRoot = "/com/github/kornilova_l/matlab/psi"

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true
}

compileKotlin.dependsOn generateMatlabLexer
compileKotlin.dependsOn generateMatlabParser
compileKotlin.dependsOn generateSingleQuoteStringLiteralLexer
