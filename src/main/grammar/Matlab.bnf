{
  parserClass="com.github.korniloval.matlab.MatlabParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Matlab"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.korniloval.matlab.psi"
  psiImplPackage="com.github.korniloval.matlab.psi.impl"

  elementTypeHolderClass="com.github.korniloval.matlab.psi.MatlabTypes"
  elementTypeClass="com.github.korniloval.matlab.psi.MatlabElementType"
  tokenTypeClass="com.github.korniloval.matlab.psi.MatlabTokenType"

  tokens=[
      /* following regexps are copied from MatlabLexer.flex to enable live preview support */
      NEWLINE='regexp:(\R( \t)*)'
      WHITE_SPACE='regexp:[ \t\x0B\f]+' // do not match new line
      SINGLE_QUOTE="'"
      FLOAT='regexp:(([\d]*\.[\d]+)|([\d]+\.))i?'
      FLOAT_EXPONENTIAL='regexp:(([\d]*\.[\d]+)|([\d]+\.)|\d+)e[+-]?[\d]+i?'
      FOR='for'
      WHILE='while'
      FUNCTION='function'
      TRUE='true'
      FALSE='false'
      IDENTIFIER='regexp:[a-zA-Z][a-zA-Z0-9_]*'
      INTEGER='regexp:[0-9]+i?'

      DOTS='...'
      DOT='.'
      COMA=','
      LPARENTH='('
      RPARENTH=')'
      LBRACKET='['
      RBRACKET=']'
      MUL='*'
      DOT_MUL='.*'
      RDIV='/'
      DOT_RDIV='./'
      LDIV='\'
      DOT_LDIV='.\'
      PLUS='+'
      MINUS='-'
      POW='^'
      DOT_POW='.^'
      ASSIGN='='
      OR='||'
      AND='&&'
      MATRIX_OR='|'
      MATRIX_AND='&'
      EQUAL='=='
      NOT_EQUAL='~='
      LESS='<'
      LESS_OR_EQUAL='<='
      MORE='>'
      MORE_OR_EQUAL='>='
      COLON=':'
      SEMICOLON=';'
      LBRACE='{'
      RBRACE='}'
      TILDA='~'
      AT='@'
    ]

    name(".*expr")='expression'
    extends(".*expr")=expr
}

root ::= NEWLINE * (element NEWLINE *) * end?
private element ::= ( el [ ';' | ',' ] ) | ';' | ',' { recoverWhile=element_recover_rule }
private el ::= if_block
  | file_operation
  | for_loop
  | while_loop
  | function_definition
  | class_definition
  | expr
  | COMMENT
private element_recover_rule ::= !( NEWLINE* ( end | elseif | else | methods | properties | events | ',' | ';' | el | <<eof>> ) )

private one_line_recovery ::= !( end | NEWLINE | '...' )

meta block ::= (<<p>> NEWLINE *)*
private block_that_recovers_until_end ::= <<block block_element>> { recoverWhile=not_end_or_oef }
private block_element ::= element { recoverWhile=not_end_or_eof_or_el }
private not_el ::= !( NEWLINE* el )
private not_end_or_eof_or_el ::= not_end_or_oef not_el
private not_end_or_oef ::= !( NEWLINE* ( end | <<eof>> ) )

if_block ::= if_token br* condition NEWLINE *
  if_block_body
  elseif_block* NEWLINE *
  [else_block] NEWLINE *
  end { pin=1 }

private if_token ::= if { recoverWhile = not_end_elseif_or_else_or_el }
condition ::= expr { recoverWhile=if_condition_recovery }
private if_condition_recovery ::= !( NEWLINE* ( end | elseif | else | el ) )

private if_block_body ::= <<block if_block_element>> { recoverWhile=not_end_or_elseif_or_else }
private if_block_element ::= element { recoverWhile=not_end_or_elseif_or_else_or_el }
private not_end_or_elseif_or_else ::= !( NEWLINE* (end | elseif | else) )
private not_end_or_elseif_or_else_or_el ::= not_end_or_elseif_or_else not_el

elseif_block ::= elseif_token NEWLINE * if_block_body
private elseif_token ::= elseif { recoverWhile=not_end_elseif_or_else_or_el }
else_block ::= else_token NEWLINE * if_block_body
private else_token ::= else { recoverWhile=not_end_or_eof_or_el }

private not_end_elseif_or_else_or_el ::= !( NEWLINE* ( end | elseif | else | el ) )

for_loop ::= for_token br* for_loop_interval ';'? NEWLINE*
    block_that_recovers_until_end
    end { pin=1 }
private for_loop_interval ::= assign_expr { recoverWhile=for_loop_interval_recovery }
private for_loop_interval_recovery ::= !( NEWLINE* ( end | NEWLINE | ';' | el ) )
private for_token ::= for { recoverWhile=not_el_one_line }

private not_el_one_line ::= one_line_recovery !( el )

while_loop ::= while_token br* while_loop_condition ';'? NEWLINE*
    block_that_recovers_until_end
    end { pin=1 }
while_loop_condition ::= expr { pin=1 recoverWhile=while_loop_recovery }
private while_loop_recovery ::= !( NEWLINE* ( end | ';' | el ) )
private while_token ::= while { pin=1 recoverWhile=while_token_recovery }
private while_token_recovery ::= !( br | while_loop_condition | NEWLINE )

function_definition ::= function_token br* return_value_part? br* function_name br* parameters? NEWLINE*
    block_that_recovers_until_end
    NEWLINE* ( end | <<eof>> ) { pin=1 }
private return_value_part ::= single_return_value_part  | multiple_return_values_part
// note pin value
private single_return_value_part ::= return_value br* '=' { pin=3 }
private multiple_return_values_part ::= return_values br* '=' { pin=1 }
private function_token ::= function { recoverWhile=not_element_or_squarebracket_or_equals }
private not_element_or_squarebracket_or_equals ::= one_line_recovery !( el | '[' | '=' | IDENTIFIER )
return_values ::= '[' br* return_values_list? br* ']' { pin=1 }
private return_values_list ::= return_value_list_item (br* ',' br* return_value_list_item)* {recoverWhile=return_values_list_recovery }
private return_values_list_recovery ::= !( br* ']' | br* '=' | br* NEWLINE )
return_value_list_item ::= IDENTIFIER { recoverWhile=not_expr_or_coma_or_rbracket }
private not_expr_or_coma_or_rbracket ::= !( ',' | ']' | '=' | IDENTIFIER | NEWLINE )
return_value ::= IDENTIFIER { recoverWhile=not_expr_or_equal }
private not_expr_or_equal ::=!( IDENTIFIER | expr | '=' | NEWLINE )
function_name ::= IDENTIFIER { recoverWhile=not_element_or_lparenth }
private not_element_or_lparenth ::= one_line_recovery !( el | '(' )
parameters ::= '(' br* parameters_list? br* ')' { pin=1 }
private parameters_list ::= parameter (br* ',' br* parameter)* { pin=1 recoverWhile=not_rparenth }
private not_rparenth ::= one_line_recovery !( ')' )
parameter ::= IDENTIFIER { recoverWhile=not_expr_or_coma_or_rparenth }
private not_expr_or_coma_or_rparenth ::= one_line_recovery !( expr | ',' | ')' )

class_definition ::= classdef_token br* class_attributes? br* class_name br* super_classes? NEWLINE*
    (( properties_block | methods_block | events_block ) NEWLINE*)*
    end { pin=1 }
private classdef_token ::= classdef { recoverWhile=classdef_token_recovery }

private not_properties_or_methods_or_end ::= !( NEWLINE* properties_block | NEWLINE* methods_block | NEWLINE* end )

class_attributes ::= '(' class_attribute_list? ')' { pin=1 recoverWhile=class_attributes_recovery }
private class_attributes_recovery ::= block_inside_class_recovery !( br* class_name )
class_attribute_list ::= class_attribute_list_item (',' class_attribute_list_item) * { recoverWhile=class_attribute_list_recovery }
private class_attribute_list_recovery ::= not_properties_or_methods_or_end !( br* ')' )
class_attribute_list_item ::= IDENTIFIER '=' expr { pin=1 recoverWhile=not_expr_or_coma_or_rparenth }

class_name ::= IDENTIFIER { recoverWhile=class_name_recovery }
private class_name_recovery ::= not_properties_or_methods_or_end !( super_classes )

super_classes ::= super_classes_token br* super_classes_list { pin=1 recoverWhile=not_properties_or_methods_or_end }
private super_classes_token ::= '<' {recoverWhile=not_super_classes_list_or_properties_or_methods_or_end}
private not_super_classes_list_or_properties_or_methods_or_end ::= block_inside_class_recovery !( br* super_classes_list )
private super_classes_list ::= super_classes_list_item ('&' super_classes_list_item) *
private super_classes_list_item ::= IDENTIFIER { recoverWhile=not_ampersand_or_super_class_or_properties_or_methods_or_end }
private not_ampersand_or_super_class_or_properties_or_methods_or_end ::= !( br* '&' | br* super_classes_list_item | NEWLINE* properties_block | NEWLINE* methods_block | NEWLINE* end )
private classdef_token_recovery ::= !( br* class_attributes | br* class_name | br* super_classes
  | NEWLINE* properties_block | NEWLINE* methods_block | NEWLINE* end )

properties_block ::= properties_token br* properties_attributes? NEWLINE*
    properties_block_body NEWLINE*
    end { pin=1 recoverWhile=block_inside_class_recovery }
private properties_token ::= properties { recoverWhile=properties_token_recovery }
private properties_token_recovery ::= block_inside_class_recovery !( NEWLINE* properties_block_body )
properties_attributes ::= '(' properties_attribute_list? ')' { pin=1 recoverWhile=properties_attributes_recovery }
private properties_attributes_recovery ::= block_inside_class_recovery !( NEWLINE* properties_block_body )
private properties_attribute_list ::= properties_attribute_list_item (',' properties_attribute_list_item ) * { recoverWhile=not_rparenth }
properties_attribute_list_item ::= IDENTIFIER '=' expr { pin=1 recoverWhile=properties_attribute_list_item_recovery }
private properties_attribute_list_item_recovery ::= block_inside_class_recovery !( properties_attribute_list_item | ',' | ')' )
private properties_block_body ::= <<block properties_block_element>> { recoverWhile=block_inside_class_recovery }
private block_inside_class_recovery ::= !( NEWLINE*  ( end | methods | properties | events ) )
private properties_block_element ::= element { recoverWhile=properties_block_element_recovery }
private properties_block_element_recovery ::= block_inside_class_recovery not_el

methods_block ::= methods_token br* methods_attributes? NEWLINE*
    methods_block_body NEWLINE*
    end { pin=1 recoverWhile=block_inside_class_recovery }
private methods_token ::= methods { recoverWhile=not_end_or_methods_block_body }
private not_end_or_methods_block_body ::= !( NEWLINE* end |  NEWLINE* methods_block_body )
methods_attributes ::= '(' properties_attribute_list? ')' { pin=1 recoverWhile=methods_attributes_recovery }
private methods_attributes_recovery ::= block_inside_class_recovery !( NEWLINE* methods_block_body )
private methods_block_body ::= <<block methods_block_element>> { recoverWhile=methods_block_body_recovery }
private methods_block_element ::= element { recoverWhile=methods_block_element_recovery }
private methods_block_body_recovery ::= !( NEWLINE* ( end | events ) )
private methods_block_element_recovery ::= methods_block_body_recovery not_el

events_block ::= events_token br* events_attributes? NEWLINE*
    events_block_body NEWLINE*
    end { pin=1 recoverWhile=block_inside_class_recovery }
private events_token ::= events { recoverWhile=events_token_recovery }
private events_token_recovery ::= !( br* events_attributes | NEWLINE* end | NEWLINE* events_block_body )
events_attributes ::= '(' properties_attribute_list? ')' { pin=1 recoverWhile=events_attributes_recovery }
private events_attributes_recovery ::= block_inside_class_recovery !( NEWLINE* events_block_body )
events_block_body ::= (IDENTIFIER NEWLINE*)* { recoverWhile=events_block_body_recovery }
private events_block_body_recovery ::= !( NEWLINE* end )

function_call ::= IDENTIFIER br* '(' br* arguments? br* ')' { pin=3 }
arguments ::= argument ( br* ',' br* argument)* { recoverWhile=arguments_recovery }
private arguments_recovery ::= !( br* ')' )
argument ::= ( matrix_index | expr ) { recoverWhile=argument_recovery }
matrix_index ::= ( end '-' expr | ':' end | ':' | end )
private argument_recovery ::= !( br | expr | matrix_index | ',' | ')' )

expr ::= assign_group
  | compare_group
  | logic_group
  | range_expr
  | add_group
  | mul_group
  | unary_group
  | primary_group

private assign_group ::= assign_expr
assign_expr ::= expr br* '=' br* expr { pin='=' rightAssociative=true }

private compare_group ::= equal_expr
  | not_equal_expr
  | less_expr
  | less_or_equal_expr
  | more_expr
  | more_or_equal_expr

private logic_group ::= or_expr
  | matrix_or_expr
  | and_expr
  | matrix_and_expr

private unary_group ::= unary_plus_expr
  | unary_min_expr
  | transpose_expr
  | nonconjugate_transpose_expr
  | unary_negation_expr

private mul_group ::= mul_expr
  | element_wise_mul_expr
  | rdiv_expr
  | element_wise_rdiv_expr
  | ldiv_expr
  | element_wise_ldiv_expr
  | pow_expr
  | element_wise_pow_expr

private add_group ::= plus_expr
  | minus_expr

private primary_group ::= literal_expr
  | method_access_expr
  | property_access_expr
  | function_expr
  | ref_expr
  | paren_expr
  | lambda_expr
  | function_ref_expr
  | cell_array_access_expr


literal_expr ::= number_literal
  | string_literal
  | boolean_literal
  | matrix_literal
  | cell_array_literal

private number_literal ::= FLOAT | FLOAT_EXPONENTIAL | INTEGER
private string_literal ::= DOUBLE_QUOTE_STRING | SINGLE_QUOTE_STRING
private boolean_literal ::= TRUE | FALSE

matrix_literal ::= '[' matrix_content? ']' { pin=1 }
private sep ::= (br | NEWLINE)
private matrix_content ::= matrix_row ( sep* ';' NEWLINE* sep* matrix_row)* { recoverWhile=not_rbracket }
private not_rbracket ::= one_line_recovery !( ']' )
matrix_row ::= matrix_item ( sep* (',' sep*)?  matrix_item)* { recoverWhile=not_rbracket_or_semicolon }
private not_rbracket_or_semicolon ::= not_rbracket !( ';' )
matrix_item ::= expr { recoverWhile=not_rbracket_or_semicolon_or_coma }
private not_rbracket_or_semicolon_or_coma ::= not_rbracket_or_semicolon !( ',' | matrix_item)

cell_array_literal ::= '{' cell_array_content? '}' { pin=1 }
private cell_array_content ::= cell_array_row ( sep* ';' sep* cell_array_row )* { recoverWhile=cell_array_content_recovery }
private cell_array_content_recovery ::= !( '}' )
cell_array_row ::= cell_array_item ( sep* (',' sep*)? cell_array_item )* { recoverWhile=cell_array_row_recovery }
private cell_array_row_recovery ::= !( '}' | sep* ';' )
cell_array_item ::= expr { recoverWhile=cell_array_item_recovery }
private cell_array_item_recovery ::= !( sep* ',' | sep* ';' | '}' | cell_array_item )


cell_array_access_expr ::= expr '{' ( matrix_index | expr ) '}'

range_expr ::= expr ':' ( expr ':' )? ( expr | end )

function_expr ::= function_call

paren_expr ::= '(' br* expr? br* ')' { pin=1 }

// todo: check priority
not_equal_expr ::= expr br* '~=' br* expr
equal_expr ::= expr br* '==' br* expr
less_expr ::= expr br* '<' br* expr
less_or_equal_expr ::= expr br* '<=' br* expr
more_expr ::= expr br* '>' br* expr
more_or_equal_expr ::= expr br* '>=' br* expr

// todo: check priority
or_expr ::= expr br* '||' br* expr
matrix_or_expr ::= expr br* '|' br* expr
and_expr ::= expr br* '&&' br* expr
matrix_and_expr ::= expr br* '&' br* expr

method_access_expr ::= expr '.' function_call
property_access_expr ::= expr '.' IDENTIFIER
ref_expr ::= IDENTIFIER
unary_min_expr ::= '-' br* expr
unary_plus_expr ::= '+' br* expr
transpose_expr ::= expr br* TRANSPOSE
nonconjugate_transpose_expr ::= expr br* DOT_TRANSPOSE
unary_negation_expr ::= '~' br* expr

rdiv_expr ::= expr '/' expr
element_wise_rdiv_expr ::= expr './' expr
ldiv_expr ::= expr '\' expr
element_wise_ldiv_expr ::= expr '.\' expr
mul_expr ::= expr br* '*' br* expr
element_wise_mul_expr ::= expr br* '.*' br* expr
pow_expr ::= expr br* '^' br* expr
element_wise_pow_expr ::= expr br* '.^' br* expr

minus_expr ::= expr br* '-' br* expr
plus_expr ::= expr br* '+' br* expr

private br ::= '...' NEWLINE { pin=1 }

function_ref_expr ::= '@' IDENTIFIER { pin=1 }

lambda_expr ::= at_token br* '(' br* lambda_arguments br* ')' lambda_body { pin=3 }
private at_token ::= '@' { recoverWhile=at_token_recovery }
private at_token_recovery ::= !( br* '(' | ';' | !( '...' ) NEWLINE )
lambda_arguments ::= lambda_argument ( br* ',' br* lambda_argument)* { recoverWhile=arguments_recovery }
lambda_argument ::= expr { recoverWhile=lambda_argument_recovery }
private lambda_argument_recovery ::= !( br | expr | ',' | ')' )
lambda_body ::= expr { recoverWhile=lambda_body_recovery }
private lambda_body_recovery ::= !( NEWLINE | br* ';' | br* ',' )

file_operation ::= file_operation_token br* file_name br* variables? { pin=1 }
private file_operation_token ::= LOAD | DIR | LS | CD { recoverWhile=load_token_recovery }
private load_token_recovery ::= !( br* NEWLINE | br* FILE_NAME )
private file_name ::= FILE_NAME { recoverWhile=file_name_recovery }
private file_name_recovery ::= !( NEWLINE | variables )
variables ::= variable+
private variable ::= IDENTIFIER { recoverWhile=variable_recovery }
private variable_recovery ::= !( variable | NEWLINE | ';' )
