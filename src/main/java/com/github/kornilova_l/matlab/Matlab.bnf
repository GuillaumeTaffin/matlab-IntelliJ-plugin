{
  parserClass="com.github.kornilova_l.matlab.MatlabParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Matlab"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.kornilova_l.matlab.psi"
  psiImplPackage="com.github.kornilova_l.matlab.psi.impl"

  elementTypeHolderClass="com.github.kornilova_l.matlab.psi.MatlabTypes"
  elementTypeClass="com.github.kornilova_l.matlab.psi.MatlabElementType"
  tokenTypeClass="com.github.kornilova_l.matlab.psi.MatlabTokenType"

  tokens=[
      SEMI=';'
      EQ='='
      LP='('
      RP=')'

      space='regexp:\s+'
      comment='regexp://.*'
      number='regexp:\d+(\.\d*)?'
      end="end"
      if="if"
      id='regexp:\p{Alpha}\w*'
      string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

      op_1='+'
      op_2='-'
      op_3='*'
      op_4='/'
      op_5='!'
      op_equal="=="
    ]

    name(".*expr")='expression'
    extends(".*expr")=expr
  }

  root ::= (function | statement) *

  property ::= id '=' expr [";"]

  if_statement ::= if expr { statement }
                           { "elseif" { statement } }
                           [ "else" { statement } ]
                      end

  expr ::=
        numeric_expression
        | testing_expression
        | logical_expression
        | string_expression
        | bit_expression
        | casting_expression
        | creating_expression
        | literal_expression
        | "null"
        | "super"
        | "this"
        | identifier
        | ( "(" expr ")" )
        | ( expr
        ( ( "(" [ arglist ] ")" )
        | ( "[" expr "]" )
        | ( "." expr )
        | ( "," expr )
        | ( "instanceof" ( class_name | interface_name ) )
        ) )

  numeric_expression ::= ( "-" expr ) | ( expr ( "+" | "-" | "*" | "/" | "%" ) expr )

  testing_expression ::= ( expr ( ">" | "<" | ">=" | "<=" | "==" | "!=" ) expr )

  logical_expression ::= ( "!" expr )
        | ( expr ( "&&" | "||" ) expr )
        | "true"
        | "false"

  string_expression ::= ( expr ( "+" | "+=" ) expr )


  literal_expr ::= number | string | float

  function ::= "function" { id } "=" id "(" parameters_list ")" { statement } "end"

  statement ::= property | if_statement | for_loop

  for_loop ::= id "=" values { statement } "end"

  values ::= expr":"expr

  parameters_list ::= id { "," id }