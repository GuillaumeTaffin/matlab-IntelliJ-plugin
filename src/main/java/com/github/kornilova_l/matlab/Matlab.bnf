{
  parserClass="com.github.kornilova_l.matlab.MatlabParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Matlab"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.kornilova_l.matlab.psi"
  psiImplPackage="com.github.kornilova_l.matlab.psi.impl"

  elementTypeHolderClass="com.github.kornilova_l.matlab.psi.MatlabTypes"
  elementTypeClass="com.github.kornilova_l.matlab.psi.MatlabElementType"
  tokenTypeClass="com.github.kornilova_l.matlab.psi.MatlabTokenType"

  tokens=[
      imaginarysuffix = "regexp:[ij]"
      echaracter = "regexp:e(?=[\d\+-])"
      space='regexp:\s+'
      comment='regexp://.*'
      string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
      id = "regexp:[A-Za-z]+[A-Za-z\d]*"

      integer='regexp:[0-9]+'

      letter='regexp:[A-Za-z]'
      digit='regexp:[0-9]'
      newline="regexp:\n"

      opensquarebracket = "["
      closesquarebracket = "]"

  ]

  extends(".*expr")=expr
}

root ::= element *
private element ::= expr ";"?

// left recursion and empty PSI children define expression root
expr ::= function_group
  | assign_expr
  | unary_group
  | conditional_group
  | mul_group
  | add_group
  | element_by_group
  | primary_group


private unary_group ::= unary_min_expr | unary_not_expr
private primary_group ::= literal_expr | simple_ref_expr | paren_expr
private conditional_group ::= conditional_expr
private mul_group ::= mul_expr | div_expr | left_div_expr | power_expr | complex_conjugate_transpose_expr
private add_group ::= plus_expr | minus_expr
private element_by_group ::= el_mul_expr | el_div_expr | el_left_div_expr | el_power_expr | el_complex_conjugate_transpose_expr
private function_group ::= function_expr

// expressions: auto-operator detection or parents
//fake ref_expr ::= expr?
literal_expr ::= number | string | array
simple_ref_expr ::= id // {extends=ref_expr elementType=ref_expr}
unary_min_expr ::= '-' expr
unary_not_expr ::= '!' expr
assign_expr ::= expr '=' expr { rightAssociative=true }
conditional_expr ::= expr ('<' | '>' | '<=' | '>=' | '==' | '!=') expr
function_expr ::= id "(" arg_list ")"

div_expr ::= expr '/' expr
left_div_expr ::= expr '\' expr
mul_expr ::= expr '*' expr
power_expr ::= expr '^' expr
complex_conjugate_transpose_expr ::= "'"

el_div_expr ::= expr './' expr
el_left_div_expr ::= expr '.\' expr
el_mul_expr ::= expr '.*' expr
el_power_expr ::= expr '.^' expr
el_complex_conjugate_transpose_expr ::= ".'"

minus_expr ::= expr '-' expr
plus_expr ::= expr '+' expr

paren_expr ::= '(' expr ')'

array ::= vector | array_with_numbers
vector ::= "(" expr [ ":" expr ] [ ":" expr ] ")"
array_with_numbers ::= "[" (";"* expr)* "]"

float_literal ::=
        (integer "." integer exponent_part)
        | ("." integer [ exponent_part ])
        | (integer exponent_part)
        | (integer "." exponent_part)

number ::= (float_literal | integer) imaginarysuffix*

exponent_part ::= (echaracter integer) | ( echaracter ["+" | "-"] integer)

arg_list ::= expr ("," expr)*